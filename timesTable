#!/usr/bin/python2.7

import argparse
import os
import sys
import subprocess
import textwrap
import math

def main():

    kEpsilon = 1.0e-12

    # Redefine the exception handling routine so that it does NOT
    # do a trace dump if the user types ^C while the command is running.
    #
    old_excepthook = sys.excepthook
    def new_hook(exceptionType, value, traceback):
        if exceptionType != KeyboardInterrupt and exceptionType != IOError:
            old_excepthook(exceptionType, value, traceback)
        else:
            pass
    sys.excepthook = new_hook

    p = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''\
            Print the times table up to n by n.
            '''),
        usage="%(prog)s [OPTION]...")

    p.add_argument("--version", action="version", version="1.000")
    p.add_argument("--size", "-n", action="store", type=int, dest="n",
        default=13, metavar="N",
	help="The size of the multiplication table (default=13).")
    p.add_argument("--primes", action="store_true",
        dest="onlyPrimes", default=False,
        help="only print out the multiplication table for prime numbers" )
    p.add_argument("--limit", action="store", type=float, dest="maxDigits",
        default=-1, metavar="MAX",
	help="Limit printing the table to numbers of length MAX-digits or less")

    args = p.parse_args()

    if args.n < 2 :
	if args.n == 1 :
	    print " * | 1"
	    print "---+---"
	    print " 1 | 1"
        sys.exit(0)

    if args.maxDigits == 0 :
        print >> sys.stderr, os.path.basename(sys.argv[0]) + \
            ": warning: max digits is 0, nothing to print."
        sys.exit(0)

    # Note: this "isPrime" array will be filled with True 
    # in the case that we want to display ALL the integers
    # from 2,n - sorry, it's a bit of a cheat to use this list
    # this way, but it makes for clean code.
    #
    isPrime = [True]*(args.n+1)

    # Sieve of Eratosthenes - skipped when wanting to list ALL numbers
    #
    if args.onlyPrimes : 
	p = 2
	while p < (args.n / 2) :
	    i = 2
	    while p*i <= args.n :
		isPrime[p*i] = False
		i += 1
	    p += 1
	    while not isPrime[p] :
		p += 1

    # Find the largest prime in table
    #
    if not args.onlyPrimes :
	maxN = args.n
    else :
	i = len(isPrime)
	i -= 1
	while not isPrime[i] : 
	    i -= 1
	maxN = i

    # If maxDigits is set then the biggest number in the table has
    # to be (99...9-1)/2 since (99...9+1)/2 * 2 (the slowest growing
    # set of entries in the table are the twos) is one digit too long!
    #
    if args.maxDigits > 0 :
	x = (int('9'*int(math.ceil(args.maxDigits)))-1)/2
	if x < maxN :
	    maxN = x

    commaFormat = "{:>,d}"
    if args.maxDigits > 0 :
	commaFormatMaxLen = len(commaFormat.format(int("9"*int(math.ceil(args.maxDigits)))))
    else :
	commaFormatMaxLen = len(commaFormat.format(maxN * maxN))

    formatList = [0]
    commaFormattMaxN = commaFormat.format(maxN)
    formatList.append(len(commaFormattMaxN))
    commaFormatPad = "{:>"+ str(formatList[-1]) + ",d}"
    outputLine = commaFormatPad.format(1).replace("1", "*") + " | "

    n = 2
    while n <= maxN :
	formatList.append(commaFormatMaxLen)

	commaFormatPad = "{:>"+ str(formatList[-1]) + ",d}"
	if isPrime[n] :
	    outputLine += commaFormatPad.format(n) + "  "
	n += 1

    # Make the horizontal dividing line of the table
    #
    dividingLine = "-"*len(outputLine)
    s = list(dividingLine)
    s[formatList[1] + 1] = '+'

    # Print 2...n on the first row then the dividing line.
    #
    print outputLine
    print "".join(s)

    # Print the multiplication table.
    #
    n = 2
    while n <= maxN :
	commaFormatPad = "{:>"+ str(formatList[1]) + ",d}"
	outputLine = commaFormatPad.format(n) + " | "
        m = 2
	if isPrime[n] :
	    while m <= maxN :
		if isPrime[m] :
		    x = n * m
		    commaFormatPad = "{:>"+ str(formatList[m]) + ",d}"
		    if args.maxDigits > 0 :
			if math.log(x, 10) <= args.maxDigits - kEpsilon :
			    outputLine += commaFormatPad.format(x) + ("* " if n == m else "  ")
			else :
			    break
		    else :
			outputLine += commaFormatPad.format(x) + ("* " if n == m else "  ")
		m += 1
	    print outputLine
        n += 1
        
if __name__ == '__main__':
    main()
