#!/usr/bin/python2.7

import argparse
import os
import sys
import subprocess
import textwrap

def main():

    # Redefine the exception handling routine so that it does NOT
    # do a trace dump if the user types ^C while lsseq is running.
    #
    old_excepthook = sys.excepthook
    def new_hook(exceptionType, value, traceback):
        if exceptionType != KeyboardInterrupt and exceptionType != IOError:
            old_excepthook(exceptionType, value, traceback)
        else:
            pass
    sys.excepthook = new_hook

    p = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''\
            Print the times table up to n by n.
            '''),
        usage="%(prog)s [OPTION]...")

    p.add_argument("--version", action="version", version="0.100")
    p.add_argument("--size", "-n", action="store", type=int, dest="n",
        default=13, metavar="N",
	help="The size of the multiplication table (default=13).")
    p.add_argument("--primes", action="store_true",
        dest="onlyPrimes", default=False,
        help="only print out the multiplication table for prime numbers" )
    p.add_argument("--limit", action="store", type=int, dest="maxDigits",
        default=-1, metavar="MAX",
	help="Limit printing the table to numbers of length MAX-digits or less")

    args = p.parse_args()

    if args.n < 1 :
        sys.exit(0)

    if args.maxDigits == 0 :
        print >> sys.stderr, os.path.basename(sys.argv[0]) + \
            ": warning: max digits is 0, nothing to print."
        sys.exit(0)

    # Note: this "isPrime" array will be filled with True 
    # in the case that we want to display ALL the integers
    # from 2,n - sorry, it's a bit of a cheat to use this list
    # this way, but it makes for clean code.
    #
    isPrime = [True]*(args.XxNxX+2)

    # Sieve of Eratosthenes - skipped when wanting to list ALL numbers
    #
    if args.onlyPrimes : 
	p = 2
	while p < (args.XxNxX / 2) :
	    i = 2
	    while p*i <= args.XxNxX :
		isPrime[p*i] = False
		i += 1
	    p += 1
	    while not isPrime[p] :
		p += 1

    # Find the largest prime in table
    #
    if not args.onlyPrimes :
	maxXxNxX = args.XxNxX
    else :
	i = len(isPrime)
	i -= 1
	while not isPrime[i] : 
	    i -= 1
	maxXxNxX = i

    # If maxDigits is set then the biggest number in the table has
    # to be (99...9-1)/2 since (99...9+1)/2 * 2 (the slowest growing
    # set of entries in the table are the twos) is one digit too long!
    #
    intFormat = "{:d}"
    if args.maxDigits > 0 :
	x = (int('9'*args.maxDigits)-1)/2
	if x < maxXxNxX :
	    maxXxNxX = x

    jpr

    outputLine = ""
    formatList = [0]
    commaFormat = "{:>,d}"
    prettyMaxLen = 0
    if args.maxDigits > 0 :
	prettyMaxLen = len(commaFormat.format(int("9"*args.maxDigits)))
    n = 1
    while n <= maxN :
	sPretty = commaFormat.format(pow(maxXxNxX, n))
	sInt = intFormat.format(pow(maxXxNxX, n))

	if args.maxDigits > 0 :
	    if len(sInt) <= args.maxDigits :
		formatList.append(len(sPretty))
	    else :
		formatList.append(prettyMaxLen)
	else :
	    formatList.append(len(sPretty))

	commaFormatPad = "{:>"+ str(formatList[-1]) + ",d}"
	outputLine += commaFormatPad.format(n)
	if n == 1 :
	    outputLine = outputLine.replace("1", " ")
	    outputLine += " | "
	else :
	    outputLine += "  "
	n += 1

    # Make the dividing line between list of powers 
    # and first row of powers of 2.
    #
    dividingLine = "-"*len(outputLine)
    s = list(dividingLine)
    s[formatList[1] + 1] = '+'

    # Print the powers to be displayed on first row
    # then the dividing line.
    #
    print outputLine
    print "".join(s)

    # Now calculate and print the powers
    #
    XxNxX = 2
    while XxNxX <= maxXxNxX :
	commaFormatPad = "{:>"+ str(formatList[1]) + ",d}"
	outputLine = commaFormatPad.format(XxNxX) + " | "
        n = 2
        while n <= maxN :
	    commaFormatPad = "{:>"+ str(formatList[n]) + ",d}"
	    if args.maxDigits > 0 :
		if len(intFormat.format(pow(XxNxX, n))) <= args.maxDigits :
		    outputLine += commaFormatPad.format(pow(XxNxX, n)) + "  "
		else :
		    break
	    else :
		outputLine += commaFormatPad.format(pow(XxNxX, n)) + "  "
            n += 1
	if isPrime[XxNxX] :
	    print outputLine
        XxNxX += 1
        
if __name__ == '__main__':
    main()
